name: Performance Regression Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/mcp_agent/autonomous/**'
      - 'tests/**'
      - '.github/workflows/performance.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp_agent/autonomous/**'
      - 'tests/**'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - baseline
        - load
        - integration

jobs:
  performance-baseline:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil statistics
    
    - name: Run baseline performance tests
      run: |
        python test_performance_simple.py > performance_baseline.log 2>&1
        echo "BASELINE_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true
    
    - name: Parse baseline results
      run: |
        python .github/scripts/parse_performance_results.py performance_baseline.log baseline
      continue-on-error: true
    
    - name: Upload baseline results
      uses: actions/upload-artifact@v3
      with:
        name: performance-baseline-results
        path: |
          performance_baseline.log
          performance_baseline_*.json
        retention-days: 30

  performance-load:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: performance-baseline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil statistics
    
    - name: Run load performance tests
      run: |
        python test_load_simple.py > performance_load.log 2>&1
        echo "LOAD_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true
    
    - name: Parse load test results
      run: |
        python .github/scripts/parse_performance_results.py performance_load.log load
      continue-on-error: true
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-load-results
        path: |
          performance_load.log
          load_test_results_*.json
        retention-days: 30

  performance-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [performance-baseline, performance-load]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil statistics
    
    - name: Run integration performance tests
      run: |
        python test_integration_simple.py > performance_integration.log 2>&1
        echo "INTEGRATION_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true
    
    - name: Parse integration results
      run: |
        python .github/scripts/parse_performance_results.py performance_integration.log integration
      continue-on-error: true
    
    - name: Upload integration results
      uses: actions/upload-artifact@v3
      with:
        name: performance-integration-results
        path: |
          performance_integration.log
          integration_test_results_*.json
        retention-days: 30

  performance-analysis:
    runs-on: ubuntu-latest
    needs: [performance-baseline, performance-load, performance-integration]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Download all performance results
      uses: actions/download-artifact@v3
      with:
        path: performance-artifacts/
    
    - name: Install analysis dependencies
      run: |
        python -m pip install --upgrade pip
        pip install matplotlib pandas numpy
    
    - name: Run performance regression analysis
      run: |
        python .github/scripts/performance_regression_analysis.py
      continue-on-error: true
    
    - name: Generate performance report
      run: |
        python .github/scripts/generate_performance_report.py
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: |
          performance_report.html
          performance_summary.json
          performance_trend_charts/
        retention-days: 90
    
    - name: Comment performance results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const summary = JSON.parse(fs.readFileSync('performance_summary.json', 'utf8'));
            
            const comment = `## 📊 Performance Test Results
            
            | Test Type | Status | Response Time | Target |
            |-----------|--------|---------------|--------|
            | Baseline | ${summary.baseline.status} | ${summary.baseline.avg_time}ms | <500ms |
            | Load Testing | ${summary.load.status} | ${summary.load.avg_time}ms | <500ms |
            | Integration | ${summary.integration.status} | ${summary.integration.avg_time}ms | <500ms |
            
            **Overall Performance**: ${summary.overall_status}
            **Regression Detected**: ${summary.regression_detected ? 'Yes ⚠️' : 'No ✅'}
            
            ${summary.regression_detected ? 
              '**⚠️ Performance regression detected! Please review the changes.**' : 
              '✅ No performance regression detected.'}
            
            [📈 View detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post performance comment:', error);
          }
    
    - name: Check performance thresholds
      run: |
        python .github/scripts/check_performance_thresholds.py
        THRESHOLD_CHECK_EXIT_CODE=$?
        if [ $THRESHOLD_CHECK_EXIT_CODE -ne 0 ]; then
          echo "::error::Performance thresholds not met. See performance report for details."
          exit 1
        fi

  performance-notification:
    runs-on: ubuntu-latest
    needs: [performance-analysis]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send Slack notification on regression
      if: env.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "🚨 Performance Regression Detected in MCP-Agent",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Performance regression detected in main branch.\n\n*Repository:* ${{ github.repository }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                }
              }
            ]
          }' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Create GitHub issue for regression
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Performance Regression Detected - ${new Date().toISOString().split('T')[0]}`,
            body: `## Performance Regression Alert

            A performance regression has been detected in the main branch.

            **Details:**
            - Commit: ${context.sha}
            - Author: ${context.actor}
            - Workflow Run: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}

            **Next Steps:**
            1. Review the performance test results
            2. Identify the root cause of the regression
            3. Implement fixes to restore performance
            4. Re-run performance tests to verify the fix

            **Performance Targets:**
            - TaskAnalyzer: <50ms average response time
            - ToolDiscovery: <100ms average response time  
            - DecisionEngine: <50ms average response time
            - Overall Workflow: <500ms end-to-end

            This issue was automatically created by the CI/CD performance monitoring system.`,
            labels: ['performance', 'regression', 'high-priority']
          });
